@prefix sh:	<http://www.w3.org/ns/shacl#>.
@prefix ex: <http://www.w3.org/2022/example#> .
@prefix property: <http://www.dke-pr/property#> .
@prefix state: <http://www.dke-pr/aircraft/state#> .
@prefix response: <http://www.dke-pr/aircraft/response#>.

ex:SpeedChangeEvent a sh:NodeShape ;
    sh:targetClass ex:SpeedChangeEvent ;
    sh:closed true ;

    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes ex:, property: ;
        sh:construct """
                PREFIX ex: <http://www.w3.org/2022/example#>
                PREFIX property: <http://www.dke-pr/property#>


                CONSTRUCT {
                    _:speedChangeEvent a ex:SpeedChangeEvent ;
                    event:timestamp ?timestamp ;
                    event:referenceState ?state ;
                    event:value ?speedChange ;
                    event:interpretation ?speedInterpretation .
                }
                WHERE {
                    ?state property:hasLastPositionUpdate ?lastUpdate .
                    ?state property:hasResponse ?response .
                    ?state property:hasVelocity ?hasVelocity .
                    FILTER (?lastUpdate < ?response)
                    BIND (?response - ?lastUpdate AS ?timeDifference)
                    BIND (?hasVelocity - ?lastVelocity / ?timeDifference AS ?speedChange)
                    BIND (NOW() as ?timestamp)
                    BIND (IF(?speedChange > 0, "Acceleration", "Slowdown") as ?speedInterpretation)
                    BIND (?speedChange > xsd:double(?threshold) as ?overSpeedThreshold)
                    FILTER(?overSpeedThreshold)
                }
            """    ];

ex:DirectionChangeEvent a sh:NodeShape ;
    sh:targetClass ex:DirectionChangeEvent ;
    sh:closed true ;

      sh:rule [
            a sh:SPARQLRule ;
            sh:prefixes ex:, property: ;
            sh:construct """
                PREFIX ex: <http://www.w3.org/2022/example#>
                PREFIX property: <http://www.dke-pr/property#>


                CONSTRUCT {
                    _:directionChangeEvent a ex:DirectionChangeEvent ;
                    event:timestamp ?timestamp ;
                    event:referenceState ?state ;
                    event:value ?directionChange ;
                    event:interpretation ?directionInterpretation .
                }
                WHERE {
                    ?state property:hasLastPositionUpdate ?lastUpdate .
                    ?state property:hasResponse ?response .
                    ?state property:hasHeadingSin ?hasHeadingSin .
                    ?state property:hasHeadingCos ?hasHeadingCos .
                    FILTER (?lastUpdate < ?response)
                    BIND (?response - ?lastUpdate AS ?timeDifference)
                    BIND (atan2(?hasHeadingSin - ?lastHeadingSin / ?timeDifference, ?hasHeadingCos - ?lastHeadingCos / ?timeDifference) AS ?directionChange)
                    BIND (NOW() as ?timestamp)
                    BIND (IF(?directionChange > 0 && ?directionChange <= 1.5708, "North", IF(?directionChange > 1.5708 && ?directionChange <= 3.14159, "West", IF(?directionChange > 3.14159 && ?directionChange <= 4.71239, "South", "East")) ) as ?directionInterpretation)
                    BIND (abs(?directionChange) > xsd:double(?threshold) as ?overDirectionThreshold)
                    FILTER(?overDirectionThreshold)
                }
            """
];
